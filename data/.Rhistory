for (i in seq_along(dose_rows)) {
cond_matrix[dose_rows[i], 3:11] <- as.character(dose_values[i])
}
View(cond_matrix)
setwd("C:/Users/kadir/Desktop/Cell_via")
library(ggplot2)
library(tidyr)
source("functions/condition_matrix.R") # condition_matrix.R dosyas??n?? okur
source("functions/cell_via_table_maker.R") # cell_via_table_maker.R dosyas??n?? okur
cell_via_table_maker <- function(df, dose_values){
dose_values=c("1 uM +C","5 uM +C","12.5 uM +C","25 uM +C","50 M +C")
avg_abs <- rowMeans(df[1:5, 2:11], na.rm = TRUE)
control_mean <- mean(as.numeric(df[6, 2:11]), na.rm = TRUE)
via_table <- data.frame(
dose_values = dose_values,
av_abs = avg_abs,
viability = (avg_abs / control_mean) * 100
)
return(via_table)
}
clean_matrix <- function(x) {
x <- x[, -1, drop = FALSE]
x <- as.data.frame(x)
rownames(x) <- LETTERS[1:8]
colnames(x) <- 1:12
return(x)
}
rows <- LETTERS[1:8]       # Sat??r isimleri: A???H
cols <- as.character(1:12) # S??tun isimleri: 1???12
cond_matrix <- matrix(
data = "PBS",    # ilk ve son kuycuklar pbs
nrow = 8,
ncol = 12,
dimnames = list(rows, cols)
)
# Assign Drug Doses (A???E sat??rlar??, 3???11 s??tunlar aras??)
dose_rows <- c("A", "B", "C", "D", "E")
dose_values <- c("1 uM +C", "5 uM +C", "12.5 uM +C", "25 uM +C", "50 M +C")
for (i in seq_along(dose_rows)) {
cond_matrix[dose_rows[i], 3:11] <- dose_values[i]
}
# Assign Special Controls
cond_matrix[, 2]      <- "BLANK(-D, -dmso, -C)"             # 2. s??tun: Blank kontrol
cond_matrix["F", 3:11] <- "TRUE CONTROL(-D, -dmso, +C)"     # F sat??r??: True Control
cond_matrix["G", 3:11] <- "DMSO EFFECT(-D, 0.1% dmso, +C)"  # G sat??r??: DMSO etkisi
cond_matrix["H", 3:11] <- "DEATH DOSE(-D, 5% dmso, +C)"     # H sat??r??: ??l??m dozu
cond_matrix
t48 <- read.csv(file = "data/t48.csv", fileEncoding = "windows-1254", sep = ";", header = TRUE) # file parametresine okumak istedi??iniz datay?? verirsiniz
t72 <- read.csv(file = "data/t72.csv", fileEncoding = "windows-1254", sep = ";", header = TRUE) # fileEncoding parametresine dosyan??n okunmas?? i??in uygunn olan karakter kodalama tipini verirsiniz
t24 <- read.csv(file = "data/t24.csv", fileEncoding = "windows-1254", sep = ";", header = TRUE) # # header true ?
t24;t48;t72
dose_values= cond_matrix[1:5,3]
data_list <- list(t24 = t24, t48 = t48, t72 = t72)
t24 <- clean_matrix(t24)
t48 <- clean_matrix(t48)
t72 <- clean_matrix(t72)
t24[] <- lapply(t24, function(x) as.numeric(gsub(",", ".", x)))
t48[] <- lapply(t48, function(x) as.numeric(gsub(",", ".", x)))
t72[] <- lapply(t72, function(x) as.numeric(gsub(",", ".", x)))
t24;t48;t72
via24 <- cell_via_table_maker(t24,dose_values = doese_values)
via48 <- cell_via_table_maker(t48,dose_values = doese_values)
via72 <- cell_via_table_maker(t72,dose_values = doese_values)
via24;via48;via72
# Veri işleme ve görselleştirme için gerekli paketler
library(dplyr)
library(ggplot2)
library(tidyr)
# Çalışma dizinini ayarlıyoruz
setwd("C:/Users/kadir/Desktop/Cell_via")
# Örnek amaçlı veri dosyalarının ilk birkaç satırını ön izleyelim
# Not: Bu adımda veri henüz yüklenmediyse, aşağıdaki kodlar 2.1'den sonra çalıştırılmalı
# head(t24) gibi komutlar, veri yapısını görmek için kullanılabilir
# Bu bölümde şunları açıklıyoruz:
# - Satırlar A–H, sütunlar 1–12
# - Hücrelerde absorbans değerleri var
# - Her zaman noktası (t24, t48, t72) ayrı CSV dosyasında tutuluyor
# - Ek olarak, condition_matrix ile deney koşulları tanımlanacak
# Örnek amaçlı veri dosyalarının ilk birkaç satırını ön izleyelim
# Not: Bu adımda veri henüz yüklenmediyse, aşağıdaki kodlar 2.1'den sonra çalıştırılmalı
# head(t24) gibi komutlar, veri yapısını görmek için kullanılabilir
# Bu bölümde şunları açıklıyoruz:
# - Satırlar A–H, sütunlar 1–12
# - Hücrelerde absorbans değerleri var
# - Her zaman noktası (t24, t48, t72) ayrı CSV dosyasında tutuluyor
# - Ek olarak, condition_matrix ile deney koşulları tanımlanacak
# Absorbans verilerini içe aktarıyoruz (3 zaman noktası)
t24 <- read.csv("data/t24.csv", sep = ";", fileEncoding = "windows-1254")
t48 <- read.csv("data/t48.csv", sep = ";", fileEncoding = "windows-1254")
t72 <- read.csv("data/t72.csv", sep = ";", fileEncoding = "windows-1254")
# Ön izleme
head(t24)
head(t48)
head(t72)
# CSV dosyasından okunan verilerde genellikle ilk sütun boş bir index sütunudur.
# Ayrıca satır ve sütun adları otomatik gelmeyebilir. Bu yüzden elle ayarlıyoruz.
clean_matrix <- function(x) {
x <- x[, -1, drop = FALSE]                # 1. sütunu (gereksiz index) çıkar
rownames(x) <- LETTERS[1:8]               # Satır adlarını A–H olarak ayarla
colnames(x) <- as.character(1:12)         # Sütun adlarını 1–12 olarak ayarla
return(as.data.frame(x))                  # Data frame olarak geri döndür
}
# Tüm zaman noktalarına uyguluyoruz
t24 <- clean_matrix(t24)
t48 <- clean_matrix(t48)
t72 <- clean_matrix(t72)
# Kontrol amaçlı yapıyı görüntüleyebiliriz
head(t24)
head(t48)
head(t72)
t24[] <- lapply(t24, function(x) as.numeric(gsub(",", ".", x)))
t48[] <- lapply(t48, function(x) as.numeric(gsub(",", ".", x)))
t72[] <- lapply(t72, function(x) as.numeric(gsub(",", ".", x)))
# Satır ve sütun isimlerini tanımlıyoruz
rows <- LETTERS[1:8]
cols <- as.character(1:12)
# Matrix başlangıcı
cond_matrix <- matrix("PBS", nrow = 8, ncol = 12, dimnames = list(rows, cols))
# Doz satırları ve etiketleri
dose_rows <- c("A", "B", "C", "D", "E")
dose_values <- c("1 uM +C", "5 uM +C", "12.5 uM +C", "25 uM +C", "50 M +C")
# Factor sıralaması yapılabilir ama atama sırasında karaktere çevrilmeli
dose_values <- factor(dose_values, levels = dose_values)
# Dozları atarken karaktere dönüştürerek yazıyoruz
for (i in seq_along(dose_rows)) {
cond_matrix[dose_rows[i], 3:11] <- as.character(dose_values[i])
}
# BLANK kontrolü: Tüm satırlarda 2. sütun
cond_matrix[, 2] <- "BLANK(-D, -dmso, -C)"
# TRUE CONTROL: F satırında sütun 3–11
cond_matrix["F", 3:11] <- "TRUE CONTROL(-D, -dmso, +C)"
# DMSO EFFECT: G satırında sütun 3–11
cond_matrix["G", 3:11] <- "DMSO EFFECT(-D, 0.1% dmso, +C)"
# DEATH DOSE: H satırında sütun 3–11
cond_matrix["H", 3:11] <- "DEATH DOSE(-D, 5% dmso, +C)"
# Koşul matrisini görüntüleyelim
cond_matrix
# Bu fonksiyon her doz grubu için ortalama absorbansı hesaplar,
# ardından kontrol grubu (F satırı) ile karşılaştırarak viabiliteyi verir
cell_via_table_maker <- function(df, dose_values) {
avg_abs <- rowMeans(df[1:5, 3:11], na.rm = TRUE)     # A–E satırları, 9 tekrar
control_mean <- mean(as.numeric(df[6, 3:11]), na.rm = TRUE)  # Satır F
via_table <- data.frame(
dose_values = dose_values,
av_abs = avg_abs,
viability = (avg_abs / control_mean) * 100         # Normalize ederek % hesapla
)
return(via_table)
}
# Fonksiyonu t24, t48, t72 verilerine uyguluyoruz
via24 <- cell_via_table_maker(t24, dose_values = dose_values)
via48 <- cell_via_table_maker(t48, dose_values = dose_values)
via72 <- cell_via_table_maker(t72, dose_values = dose_values)
# Sonuçları görüntüleyelim
via24
via48
via72
# Viabilite tabloları zaten % olarak hesaplandı.
# Şimdi ilk görsel bakış için barplot ile hızlıca gösterebiliriz:
barplot(via24$viability,
names.arg = via24$dose_values,
ylim = c(0, 120),
col = "steelblue",
main = "t24 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via48$viability,
names.arg = via48$dose_values,
ylim = c(0, 120),
col = "seagreen",
main = "t48 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via72$viability,
names.arg = via72$dose_values,
ylim = c(0, 120),
col = "tomato",
main = "t72 Viability (%)",
ylab = "Viability (%)",
las = 2)
# t24 verisini uzun forma dönüştür
t24_long <- pivot_longer(t24, cols = everything(), names_to = "column", values_to = "value")
t24_long$row <- rep(rownames(t24), times = ncol(t24))
# condition_matrix'i düzgünce data.frame'e çevir ve row sütununu ekle
cond_df <- as.data.frame(cond_matrix)
cond_df$row <- rownames(cond_matrix)
# uzun forma getir
cond_long <- pivot_longer(cond_df, cols = -row, names_to = "column", values_to = "condition")
# karakter dönüşümleri (uyumsuzluk hatası engelleme)
t24_long$column <- as.character(t24_long$column)
cond_long$column <- as.character(cond_long$column)
t24_long$row <- as.character(t24_long$row)
cond_long$row <- as.character(cond_long$row)
# merge işlemi
t24_merged <- merge(t24_long, cond_long, by = c("row", "column"))
# Doz sıralamasını belirt
dose_levels <- c("1 uM +C", "5 uM +C", "12.5 uM +C", "25 uM +C", "50 M +C",
"TRUE CONTROL(-D, -dmso, +C)", "DMSO EFFECT(-D, 0.1% dmso, +C)",
"DEATH DOSE(-D, 5% dmso, +C)", "BLANK(-D, -dmso, -C)", "PBS")
t24_merged$condition <- factor(t24_merged$condition, levels = dose_levels)
# Nokta grafiği çizimi
ggplot(t24_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
#geom_jitter(width = 0.2, alpha = 0.6, color = "steelblue") +
labs(title = "t24 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Tüm zaman noktalarını birleştirerek veri çerçevesi oluştur
via24$time <- "t24"
via48$time <- "t48"
via72$time <- "t72"
via_all <- rbind(via24, via48, via72)
# Zaman ve doz bazlı dağılım grafiği
ggplot(via_all, aes(x = dose_values, y = viability, group = time, color = time)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Viability by Dose and Time", x = "Dose", y = "Viability (%)") +
theme_minimal()
# Facet plot: her zaman noktası ayrı panelde gösterilir
ggplot(via_all, aes(x = dose_values, y = viability, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~time) +
labs(title = "Viability by Dose (Faceted by Time)", x = "Dose", y = "Viability (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Veri işleme ve görselleştirme için gerekli paketler
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
library(tibble)
library(openxlsx)
# Çalışma dizinini ayarlıyoruz
setwd("C:/Users/kadir/Desktop/Cell_via")
source("functions/generate_viability_data_with_contamination.R")
source("functions/condition_matrix.R")
source("functions/prepare_long_data.R")
# Ön izleme
head(t24)
head(t48)
head(t72)
cond_matrix
# Bu fonksiyon her doz grubu için ortalama absorbansı hesaplar,
# ardından kontrol grubu (F satırı) ile karşılaştırarak viabiliteyi verir
cell_via_table_maker <- function(df, dose_values) {
avg_abs <- rowMeans(df[1:5, 3:11], na.rm = TRUE)     # A–E satırları, 9 tekrar
control_mean <- mean(as.numeric(df[6, 3:11]), na.rm = TRUE)  # Satır F
via_table <- data.frame(
dose_values = dose_values,
av_abs = avg_abs,
viability = (avg_abs / control_mean) * 100         # Normalize ederek % hesapla
)
return(via_table)
}
# Fonksiyonu t24, t48, t72 verilerine uyguluyoruz
via24 <- cell_via_table_maker(t24, dose_values = dose_values)
via48 <- cell_via_table_maker(t48, dose_values = dose_values)
via72 <- cell_via_table_maker(t72, dose_values = dose_values)
# Sonuçları görüntüleyelim
via24
via48
via72
# Viabilite tabloları zaten % olarak hesaplandı.
# Şimdi ilk görsel bakış için barplot ile hızlıca gösterebiliriz:
barplot(via24$viability,
names.arg = via24$dose_values,
ylim = c(0, 120),
col = "steelblue",
main = "t24 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via48$viability,
names.arg = via48$dose_values,
ylim = c(0, 120),
col = "seagreen",
main = "t48 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via72$viability,
names.arg = via72$dose_values,
ylim = c(0, 120),
col = "tomato",
main = "t72 Viability (%)",
ylab = "Viability (%)",
las = 2)
dose_levels <- c(
"1 uM +C",
"5 uM +C",
"12.5 uM +C",
"25 uM +C",
"50 M +C",
"TRUE CONTROL(-D, -dmso, +C)",
"DMSO EFFECT(-D, 0.1% dmso, +C)",
"DEATH DOSE(-D, 5% dmso, +C)",
"BLANK(-D, -dmso, -C)",
"PBS"
)
t24_merged <- prepare_long_data(t24, cond_matrix, dose_levels)
t48_merged <- prepare_long_data(t48, cond_matrix, dose_levels)
t72_merged <- prepare_long_data(t72, cond_matrix, dose_levels)
# Nokta grafiği çizimi
ggplot(t24_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t24 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Nokta grafiği çizimi
ggplot(t48_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t48 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Nokta grafiği çizimi
ggplot(t72_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t72 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Tüm zaman noktalarını birleştirerek veri çerçevesi oluştur
via24$time <- "t24"
via48$time <- "t48"
via72$time <- "t72"
via_all <- rbind(via24, via48, via72)
# Zaman ve doz bazlı dağılım grafiği
ggplot(via_all, aes(x = dose_values, y = viability, group = time, color = time)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Viability by Dose and Time", x = "Dose", y = "Viability (%)") +
theme_minimal()
# Facet plot: her zaman noktası ayrı panelde gösterilir
ggplot(via_all, aes(x = dose_values, y = viability, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~time) +
labs(title = "Viability by Dose (Faceted by Time)", x = "Dose", y = "Viability (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Veri işleme ve görselleştirme için gerekli paketler
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("tidyr", quietly = TRUE)) {
install.packages("tidyr")
}
if (!requireNamespace("purrr", quietly = TRUE)) {
install.packages("purrr")
}
if (!requireNamespace("tibble", quietly = TRUE)) {
install.packages("tibble")
}
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
library(tibble)
library(openxlsx)
# Veri işleme ve görselleştirme için gerekli paketler
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("tidyr", quietly = TRUE)) {
install.packages("tidyr")
}
if (!requireNamespace("purrr", quietly = TRUE)) {
install.packages("purrr")
}
if (!requireNamespace("tibble", quietly = TRUE)) {
install.packages("tibble")
}
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
library(tibble)
library(openxlsx)
# Çalışma dizinini ayarlıyoruz
setwd("C:/Users/kadir/Desktop/Cell_via")
# Örnek amaçlı veri dosyalarının ilk birkaç satırını ön izleyelim
# Not: Bu adımda veri henüz yüklenmediyse, aşağıdaki kodlar 2.1'den sonra çalıştırılmalı
# head(t24) gibi komutlar, veri yapısını görmek için kullanılabilir
# Bu bölümde şunları açıklıyoruz:
# - Satırlar A–H, sütunlar 1–12
# - Hücrelerde absorbans değerleri var
# - Her zaman noktası (t24, t48, t72) ayrı CSV dosyasında tutuluyor
# - Ek olarak, condition_matrix ile deney koşulları tanımlanacak
# Örnek amaçlı veri dosyalarının ilk birkaç satırını ön izleyelim
# Not: Bu adımda veri henüz yüklenmediyse, aşağıdaki kodlar 2.1'den sonra çalıştırılmalı
# head(t24) gibi komutlar, veri yapısını görmek için kullanılabilir
# Bu bölümde şunları açıklıyoruz:
# - Satırlar A–H, sütunlar 1–12
# - Hücrelerde absorbans değerleri var
# - Her zaman noktası (t24, t48, t72) ayrı CSV dosyasında tutuluyor
# - Ek olarak, condition_matrix ile deney koşulları tanımlanacak
source("functions/generate_viability_data_with_contamination.R")
source("functions/condition_matrix.R")
source("functions/prepare_long_data.R")
# Ön izleme
head(t24)
head(t48)
head(t72)
# t24[] <- lapply(t24, function(x) as.numeric(gsub(",", ".", x)))
# t48[] <- lapply(t48, function(x) as.numeric(gsub(",", ".", x)))
# t72[] <- lapply(t72, function(x) as.numeric(gsub(",", ".", x)))
cond_matrix
# Bu fonksiyon her doz grubu için ortalama absorbansı hesaplar,
# ardından kontrol grubu (F satırı) ile karşılaştırarak viabiliteyi verir
cell_via_table_maker <- function(df, dose_values) {
avg_abs <- rowMeans(df[1:5, 3:11], na.rm = TRUE)     # A–E satırları, 9 tekrar
control_mean <- mean(as.numeric(df[6, 3:11]), na.rm = TRUE)  # Satır F
via_table <- data.frame(
dose_values = dose_values,
av_abs = avg_abs,
viability = (avg_abs / control_mean) * 100         # Normalize ederek % hesapla
)
return(via_table)
}
# Fonksiyonu t24, t48, t72 verilerine uyguluyoruz
via24 <- cell_via_table_maker(t24, dose_values = dose_values)
via48 <- cell_via_table_maker(t48, dose_values = dose_values)
via72 <- cell_via_table_maker(t72, dose_values = dose_values)
# Sonuçları görüntüleyelim
via24
via48
via72
# Viabilite tabloları zaten % olarak hesaplandı.
# Şimdi ilk görsel bakış için barplot ile hızlıca gösterebiliriz:
barplot(via24$viability,
names.arg = via24$dose_values,
ylim = c(0, 120),
col = "steelblue",
main = "t24 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via48$viability,
names.arg = via48$dose_values,
ylim = c(0, 120),
col = "seagreen",
main = "t48 Viability (%)",
ylab = "Viability (%)",
las = 2)
barplot(via72$viability,
names.arg = via72$dose_values,
ylim = c(0, 120),
col = "tomato",
main = "t72 Viability (%)",
ylab = "Viability (%)",
las = 2)
dose_levels <- c(
"1 uM +C",
"5 uM +C",
"12.5 uM +C",
"25 uM +C",
"50 M +C",
"TRUE CONTROL(-D, -dmso, +C)",
"DMSO EFFECT(-D, 0.1% dmso, +C)",
"DEATH DOSE(-D, 5% dmso, +C)",
"BLANK(-D, -dmso, -C)",
"PBS"
)
t24_merged <- prepare_long_data(t24, cond_matrix, dose_levels)
t48_merged <- prepare_long_data(t48, cond_matrix, dose_levels)
t72_merged <- prepare_long_data(t72, cond_matrix, dose_levels)
# Nokta grafiği çizimi
ggplot(t24_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t24 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Nokta grafiği çizimi
ggplot(t48_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t48 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Nokta grafiği çizimi
ggplot(t72_merged, aes(x = condition, y = value)) +
geom_boxplot(outlier.shape = NA, fill = "lightgray", alpha = 0.5) +
labs(title = "t72 Absorbance by Condition", x = "Condition", y = "Absorbance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Tüm zaman noktalarını birleştirerek veri çerçevesi oluştur
via24$time <- "t24"
via48$time <- "t48"
via72$time <- "t72"
via_all <- rbind(via24, via48, via72)
# Zaman ve doz bazlı dağılım grafiği
ggplot(via_all, aes(x = dose_values, y = viability, group = time, color = time)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Viability by Dose and Time", x = "Dose", y = "Viability (%)") +
theme_minimal()
# Facet plot: her zaman noktası ayrı panelde gösterilir
ggplot(via_all, aes(x = dose_values, y = viability, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~time) +
labs(title = "Viability by Dose (Faceted by Time)", x = "Dose", y = "Viability (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("C:/Users/kadir/Desktop/meme/data")
df1 <- read.csv("veri.csv")
View(df1)
colnames(df1)
